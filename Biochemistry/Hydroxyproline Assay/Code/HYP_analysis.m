%read in absorbance, weights, and loading data
data_file_string = "C:\Users\GregMilburn\Documents\Ongoing_Projects\HYP_assays\VADs\plate4\HYP_VAD_Plate04.xlsx"
sheet = 'Tube_Weights'
weight_dt = readtable(data_file_string,'Sheet',sheet)
sheet = 'Plate_Loading'
loading_dt = readtable(data_file_string,'Sheet',sheet)
sheet = 'Abs_data'
dt= readtable(data_file_string,'Sheet',sheet)

%set export figure and tablename
name= 'plate4_VAD_analysis'

%are you doing replicates by 2 or 3
replicates= 3

%update volumes and dilutions
%Well volume of 10 because 10 microL were used in each well. Dilution factor is 2
%because we dilute 50:50 the sample with water. Initial volume is 1000 because we
%add 500 microL of HCl then 500 microL of NaOH to the ground tissue
well_volume = 10
dilution_factor = 2
inital_volume = 1000

%converstion factor to convert micrograms of HYP to micrograms of collagen.
%Collagen is ~13.5% hydroxyproline so this is where the conversion come
%from
HYPCollagenConversion = 0.135

standards.concentration= [0 0.2 0.4 0.6 0.8 1.0 1.2 1.4]'
letters= {'A','B','C','D','E','F','G','H'}

%average the first three values from each row (i.e. A1, A2, A3, or two if
%just in duplicate) this also assumes that your standards are organized in
%the first columns and A-H rows
for i= 1:numel(letters)
    indx = find(strlength(dt.well)<3 & contains(dt.well,letters(i)))
    standards.abs(i,:) = dt.abs(indx(1:replicates))
    standards.average(i,:) = mean(dt.abs(indx(1:replicates)))
end

%subtract out average blank from all average standards
standards.abs = standards.abs - standards.average(1)
standards.average= standards.average - standards.average(1)

%reorganize hashcodes from plate layout to single column
counter = 0
for i= 1:numel(letters)
    unknowns.hashcodes(counter+1,:) = loading_dt(i,6)
    counter= counter+1
    unknowns.hashcodes(counter+1,:) = loading_dt(i,9)
    counter= counter+1
end

unknowns.hashcodes = table2array(unknowns.hashcodes)
%reorganize abs values for each hashcode from the single column
counter = 0
for i= 1:numel(letters)
    indx= find(contains(dt.well,letters(i)))
    unknowns.abs(counter+1,:) = dt.abs(indx(4:6))
    counter= counter+1
    unknowns.abs(counter+1,:) = dt.abs(indx(7:9))
    counter= counter+1
end

%calculate average abs for each unknown sample
for i= 1 :length(unknowns.abs)
    unknowns.average(i,:) = mean(unknowns.abs(i,:))
end

% check to ensure that the absorbance of the unknowns are within the linear
% dynamic range of the of the standard curve. If the values are above the
% range of the standard curve then you will need to exclude these data and
% rerun the sample with less tissue
for i= 1:length(unknowns.average)
    if unknowns.average(i,:)>max(standards.average)
        unknowns.LDR_check(i,:) = 1
    else
        unknowns.LDR_check(i,:) = 0
    end    
end    

sp= initialise_publication_quality_figure(...
        'no_of_panels_wide', 2, ...
        'no_of_panels_high', 2, ...
        'x_to_y_axes_ratio', 1,...
        'axes_padding_left', 0,...
        'right_margin', 0.01,...
        'left_margin',0.5,...
        'axes_padding_left',0.75,...
        'axes_padding_right',0.5,...
        'axes_padding_bottom',0.5,...
        'bottom_subplot_adjustments', [],...
        'height_subplot_adjustments', [],...
        'right_subplot_adjustments', [-4 0 0 0],...
        'bottom_margin',0.5,...
        'top_margin',0.75,...
        'panel_label_font_size',16, ...
        'omit_panels',2,...
        'individual_panel_labels',{'A','','B','C'});


%% Plot Figure with LLM
     lin_mod = fit_linear_model(standards.concentration,standards.average,'subplot_handle',sp(1))
     plot(sp(1),standards.concentration,standards.average,...
          'MarkerSize',8,...
          'Marker','o',...
          'MarkerFaceColor','k',...
          'MarkerEdgeColor','k','linestyle','none'); 
     
     plot(sp(1),lin_mod.x_fit, lin_mod.y_fit,'k-','LineWidth',2);
     plot(sp(1),lin_mod.x_fit, lin_mod.y_regression, 'k','linestyle',':','LineWidth',1);
     plot(sp(1),standards.concentration,standards.abs,'ro','MarkerSize',4)
     title_name=([lin_mod.title_string])
     
     %calculate HYP micrograms per well in unknown samples based on linear model
    %fits
    for i= 1:length(unknowns.average)
    unknowns.HYP_well_micrograms(i,:) = (unknowns.abs(i,:) - lin_mod.intercept)/lin_mod.slope 
    end
    for i= 1:length(unknowns.average)
    unknowns.HYP_well_micrograms_average(i,:) = (unknowns.average(i,:) - lin_mod.intercept)/lin_mod.slope 
    end
     plot(sp(1),unknowns.HYP_well_micrograms,unknowns.abs,'gd')
  
    ymax= round(max(max(standards.average)+0.1*max(standards.average),max(unknowns.average)+0.1*max(unknowns.average)),2)

    improve_axes('axis_handle',sp(1),...
    'y_axis_label', {'Abs'}, ...
    'y_label_offset', -0.05,...
    'x_axis_label', {'HYP' ['(',char(956),'g)']},...
    'x_label_offset', -0.15,... 
    'title',title_name,...
    'title_font_size',14,...
    'title_y_offset', 1.2,...
    'y_tick_decimal',2,...
    'x_tick_decimal',2,...
    'label_font_size',14,...
    'axis_line_width',4,...
    'tick_font_size',14,...
    'y_tick_length',0.05,...
    'y_ticks', [0 ymax],...
    'y_tick_label_positions', [0 ymax],...
    'y_tick_labels', {string(0), string(ymax)},...
    'y_tick_label_horizontal_offset',-0.02,...
    'label_font_size',14,...
    'y_tick_length', 0.015)



%calculate HYP in orginal sample and normalize to tissue quantity
%Divide by 10 because 10 microL were used in each well. Multiply by 2
%because we dilute 50:50 the sample with water. Multiply by 1000 because we
%add 500 microL of HCl then 500 microL of NaOH to the ground tissue

unknowns.original_HYP_mass = ((unknowns.HYP_well_micrograms_average/well_volume)*dilution_factor)*inital_volume

unknowns = struct2table(unknowns)
merged_dt = innerjoin(weight_dt,unknowns,'LeftKeys','Hashcode','RightKeys','hashcodes')
%calculate the microg of HYP per mg of tissue
for i= 1:height(merged_dt)
merged_dt.HYP_per_tissue_mass(i) = merged_dt.original_HYP_mass(i)/(merged_dt.GroundTissueWeight_g_(i)*1000)
end
merged_dt.collagen_per_tissue_mass = merged_dt.HYP_per_tissue_mass/HYPCollagenConversion



%plot the calculated unknowns and show variation by sample
plot(sp(3),1:length(merged_dt.average),merged_dt.HYP_well_micrograms_average,'k_','MarkerSize',12,'MarkerFaceColor','k')
plot(sp(3),merged_dt.HYP_well_micrograms,'gd')



ymax = round(max(merged_dt.HYP_well_micrograms_average + 0.1*merged_dt.HYP_well_micrograms_average),3)
    improve_axes('axis_handle',sp(3),...
    'y_axis_label', {'HYP per',['well (',char(956),'g)']}, ...
    'y_label_offset', -0.4,...
    'x_axis_label', {'Sample No.'},...
    'x_label_offset', -0.15,... 
    'title_y_offset', 1.2,...
    'y_tick_decimal',3,...
    'x_tick_decimal',0,...
    'y_label_offset',-0.16,...
    'label_font_size',12,...
    'axis_line_width',2,...
    'tick_font_size',12,...
    'y_tick_length',0.05,...
    'y_ticks', [0 ymax],...
    'y_tick_label_positions', [0 ymax],...
    'y_tick_labels', {string(0), string(ymax)},...
    'y_tick_label_horizontal_offset',-0.07,...
    'label_font_size',12)
plot(sp(4),1:length(merged_dt.average),merged_dt.collagen_per_tissue_mass,'kd','MarkerSize',12,'MarkerFaceColor','g')

ymax = round(max(merged_dt.collagen_per_tissue_mass + 0.1*merged_dt.collagen_per_tissue_mass),2)
    improve_axes('axis_handle',sp(4),...
    'y_axis_label', {'Collagen', 'to', 'Tissue', ['(',char(956),'g / mg)']}, ...
    'y_label_offset', -0.9,...
    'x_axis_label', {'Sample No.'},...
    'x_label_offset', -0.15,... 
    'title_y_offset', 1.2,...
    'y_tick_decimal',3,...
    'x_tick_decimal',0,...
    'y_label_offset',-0.16,...
    'label_font_size',12,...
    'axis_line_width',2,...
    'tick_font_size',12,...
    'y_tick_length',0.05,...
    'y_ticks', [0 ymax],...
    'y_tick_label_positions', [0 ymax],...
    'y_tick_labels', {string(0), string(ymax)},...
    'y_tick_label_horizontal_offset',-0.07,...
    'label_font_size',12)
    
%write data table and export analysis figure as png
writetable(merged_dt,[name, '.xlsx'])    
exportgraphics(gcf, [name,'.png'])    